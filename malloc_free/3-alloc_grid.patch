diff --git a/malloc_free/2-main.c b/malloc_free/2-main.c
index e565a4a..302cc22 100644
--- a/malloc_free/2-main.c
+++ b/malloc_free/2-main.c
@@ -3,21 +3,21 @@
 #include <stdlib.h>
 
 /**
- * main - check the code
- *
- * Return: Always 0.
- */
+* main - check the code
+*
+* Return: Always 0.
+*/
 int main(void)
 {
-    char *s;
+char *s;
 
-    s = str_concat("Best ", "School");
-    if (s == NULL)
-    {
-        printf("failed\n");
-        return (1);
-    }
-    printf("%s\n", s);
-    free(s);
-    return (0);
+s = str_concat("Best ", "School");
+if (s == NULL)
+{
+printf("failed\n");
+return (1);
+}
+printf("%s\n", s);
+free(s);
+return (0);
 }
diff --git a/malloc_free/2-str_concat b/malloc_free/2-str_concat
new file mode 100755
index 0000000..4452b69
Binary files /dev/null and b/malloc_free/2-str_concat differ
diff --git a/malloc_free/2-str_concat.c b/malloc_free/2-str_concat.c
index 8e300db..50c6918 100644
--- a/malloc_free/2-str_concat.c
+++ b/malloc_free/2-str_concat.c
@@ -16,14 +16,13 @@ int len1 = 0, len2 = 0, i, j;
 if (s1 != NULL)
 {
 while (s1[len1] != '\0')
-    len1++;
+len1++;
 }
 if (s2 != NULL)
 {
 while (s2[len2] != '\0')
-    len2++;
+len2++;
 }
-
 /* Allocate memory for concatenated string (+1 for null terminator) */
 concat = malloc(sizeof(char) * (len1 + len2 + 1));
 if (concat == NULL)
diff --git a/malloc_free/2-str_concat.patch b/malloc_free/2-str_concat.patch
new file mode 100644
index 0000000..a42e560
--- /dev/null
+++ b/malloc_free/2-str_concat.patch
@@ -0,0 +1,61 @@
+diff --git a/malloc_free/2-main.c b/malloc_free/2-main.c
+index e565a4a..302cc22 100644
+--- a/malloc_free/2-main.c
++++ b/malloc_free/2-main.c
+@@ -3,21 +3,21 @@
+ #include <stdlib.h>
+ 
+ /**
+- * main - check the code
+- *
+- * Return: Always 0.
+- */
++* main - check the code
++*
++* Return: Always 0.
++*/
+ int main(void)
+ {
+-    char *s;
++char *s;
+ 
+-    s = str_concat("Best ", "School");
+-    if (s == NULL)
+-    {
+-        printf("failed\n");
+-        return (1);
+-    }
+-    printf("%s\n", s);
+-    free(s);
+-    return (0);
++s = str_concat("Best ", "School");
++if (s == NULL)
++{
++printf("failed\n");
++return (1);
++}
++printf("%s\n", s);
++free(s);
++return (0);
+ }
+diff --git a/malloc_free/2-str_concat.c b/malloc_free/2-str_concat.c
+index 8e300db..50c6918 100644
+--- a/malloc_free/2-str_concat.c
++++ b/malloc_free/2-str_concat.c
+@@ -16,14 +16,13 @@ int len1 = 0, len2 = 0, i, j;
+ if (s1 != NULL)
+ {
+ while (s1[len1] != '\0')
+-    len1++;
++len1++;
+ }
+ if (s2 != NULL)
+ {
+ while (s2[len2] != '\0')
+-    len2++;
++len2++;
+ }
+-
+ /* Allocate memory for concatenated string (+1 for null terminator) */
+ concat = malloc(sizeof(char) * (len1 + len2 + 1));
+ if (concat == NULL)
diff --git a/malloc_free/3-alloc_grid b/malloc_free/3-alloc_grid
new file mode 100755
index 0000000..0b1cdf8
Binary files /dev/null and b/malloc_free/3-alloc_grid differ
diff --git a/malloc_free/3-alloc_grid.c b/malloc_free/3-alloc_grid.c
new file mode 100644
index 0000000..b91f378
--- /dev/null
+++ b/malloc_free/3-alloc_grid.c
@@ -0,0 +1,44 @@
+#include <stdlib.h>
+
+/**
+* alloc_grid - Allocates memory for a 2D array of integers and initializes it to 0.
+* @width: Number of columns.
+* @height: Number of rows.
+*
+* Return: Pointer to the 2D array, or NULL on failure.
+*/
+int **alloc_grid(int width, int height)
+{
+int **grid;
+int i, j;
+
+/* Return NULL if width or height is 0 or negative */
+if (width <= 0 || height <= 0)
+return (NULL);
+
+/* Allocate memory for row pointers */
+grid = malloc(sizeof(int *) * height);
+if (grid == NULL)
+return (NULL);
+
+/* Allocate memory for each row and initialize elements to 0 */
+for (i = 0; i < height; i++)
+{
+grid[i] = malloc(sizeof(int) * width);
+if (grid[i] == NULL) /* Free allocated memory if malloc fails */
+{
+    while (i > 0)
+    {
+	free(grid[i - 1]);
+	i--;
+    }
+    free(grid);
+    return (NULL);
+}
+for (j = 0; j < width; j++)
+    grid[i][j] = 0; /* Initialize elements to 0 */
+}
+
+return (grid);
+}
+
diff --git a/malloc_free/3-main.c b/malloc_free/3-main.c
new file mode 100644
index 0000000..d2f2f7d
--- /dev/null
+++ b/malloc_free/3-main.c
@@ -0,0 +1,52 @@
+#include "main.h"
+#include <stdio.h>
+#include <stdlib.h>
+
+/**
+* print_grid - prints a grid of integers
+* @grid: the address of the two dimensional grid
+* @width: width of the grid
+* @height: height of the grid
+*
+* Return: Nothing.
+*/
+void print_grid(int **grid, int width, int height)
+{
+int w;
+int h;
+
+h = 0;
+while (h < height)
+{
+w = 0;
+while (w < width)
+{
+    printf("%d ", grid[h][w]);
+    w++;
+}
+printf("\n");
+h++;
+}   
+}
+
+/**
+* main - check the code
+*
+* Return: Always 0.
+*/
+int main(void)
+{
+int **grid;
+
+grid = alloc_grid(6, 4);
+if (grid == NULL)
+{
+return (1);
+}
+print_grid(grid, 6, 4);
+printf("\n");
+grid[0][3] = 98;
+grid[3][4] = 402;
+print_grid(grid, 6, 4);
+return (0);
+}
diff --git a/malloc_free/main.h b/malloc_free/main.h
index 9f5ac63..6bc26f7 100644
--- a/malloc_free/main.h
+++ b/malloc_free/main.h
@@ -5,5 +5,6 @@ char *create_array(unsigned int size, char c);
 char *create_array(unsigned int size, char c);
 char *_strdup(char *str);
 char *str_concat(char *s1, char *s2);
+int **alloc_grid(int width, int height);
 
 #endif /* MAIN_H */
diff --git a/malloc_free/mon_patch.patch b/malloc_free/mon_patch.patch
new file mode 100644
index 0000000..a42e560
--- /dev/null
+++ b/malloc_free/mon_patch.patch
@@ -0,0 +1,61 @@
+diff --git a/malloc_free/2-main.c b/malloc_free/2-main.c
+index e565a4a..302cc22 100644
+--- a/malloc_free/2-main.c
++++ b/malloc_free/2-main.c
+@@ -3,21 +3,21 @@
+ #include <stdlib.h>
+ 
+ /**
+- * main - check the code
+- *
+- * Return: Always 0.
+- */
++* main - check the code
++*
++* Return: Always 0.
++*/
+ int main(void)
+ {
+-    char *s;
++char *s;
+ 
+-    s = str_concat("Best ", "School");
+-    if (s == NULL)
+-    {
+-        printf("failed\n");
+-        return (1);
+-    }
+-    printf("%s\n", s);
+-    free(s);
+-    return (0);
++s = str_concat("Best ", "School");
++if (s == NULL)
++{
++printf("failed\n");
++return (1);
++}
++printf("%s\n", s);
++free(s);
++return (0);
+ }
+diff --git a/malloc_free/2-str_concat.c b/malloc_free/2-str_concat.c
+index 8e300db..50c6918 100644
+--- a/malloc_free/2-str_concat.c
++++ b/malloc_free/2-str_concat.c
+@@ -16,14 +16,13 @@ int len1 = 0, len2 = 0, i, j;
+ if (s1 != NULL)
+ {
+ while (s1[len1] != '\0')
+-    len1++;
++len1++;
+ }
+ if (s2 != NULL)
+ {
+ while (s2[len2] != '\0')
+-    len2++;
++len2++;
+ }
+-
+ /* Allocate memory for concatenated string (+1 for null terminator) */
+ concat = malloc(sizeof(char) * (len1 + len2 + 1));
+ if (concat == NULL)
